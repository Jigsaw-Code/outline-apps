// Copyright 2024 The Outline Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file This file declares data structures and loads the functions exported by the backend C library
 * (e.g., `libbackend.so` on Linux).
 *
 * The C type definitions can be found in the Go code or the header file generated by the Go compiler
 * (e.g., `client/output/build/linux/libbackend.h` for the Linux target).
 */

import {promisify} from 'node:util';

import koffi from 'koffi';

import {pathToBackendLibrary} from './app_paths';

/** Corresponds to the `PlatformError` type defined in the C library. */
export interface GoPlatformError {
  Code: string;
  DetailJson: string;
}

/** Corresponds to the `FetchResourceResult` type defined in the C library. */
export interface GoFetchResourceResult {
  Content: string;
  Error?: GoPlatformError;
}

let goFetchResourceFunc: Function | undefined;

/** Corresponds to the `FetchResource` function defined in the C library. */
export async function goFetchResource(
  url: string
): Promise<GoFetchResourceResult> {
  if (!goFetchResourceFunc) {
    const fetchFunc = ensureBackendLibraryLoaded().func(
      'FetchResource',
      koffi.struct('FetchResourceResult', {
        Content: cgoString!,
        Error: koffi.out(koffi.pointer(cgoPlatformErrorStruct!)),
      }),
      ['str']
    );
    goFetchResourceFunc = promisify(fetchFunc.async);
  }
  const result = await goFetchResourceFunc(url);
  result.Error = await decodeCGoPlatformErrorPtr(result.Error);
  return result;
}

let backendLib: koffi.IKoffiLib | undefined;
let cgoString: koffi.IKoffiCType | undefined;
let cgoPlatformErrorStruct: koffi.IKoffiCType | undefined;
let freeCGoPlatformErrorFunc: Function | undefined;

/**
 * Ensures the backend library is loaded and initializes the common data structures.
 * It also sets up the auto-release for the pointer types.
 *
 * @returns The loaded backend library instance.
 */
function ensureBackendLibraryLoaded(): koffi.IKoffiLib {
  if (!backendLib) {
    backendLib = koffi.load(pathToBackendLibrary());

    // Define C strings and setup auto release
    cgoString = koffi.disposable(
      'CGoAutoReleaseString',
      'str',
      backendLib.func('FreeCGoString', 'void', ['str'])
    );

    // Define PlatformError pointers and release function
    cgoPlatformErrorStruct = koffi.struct('PlatformError', {
      Code: cgoString,
      DetailJson: cgoString,
    });
    freeCGoPlatformErrorFunc = promisify(
      backendLib.func('FreeCGoPlatformError', 'void', [
        koffi.pointer(cgoPlatformErrorStruct),
      ]).async
    );
  }
  return backendLib;
}

/** Decode a `PlatformError*` to a TypeScript structure, and release the pointer. */
async function decodeCGoPlatformErrorPtr(
  ptr: unknown
): Promise<GoPlatformError | null> {
  if (!ptr) {
    return null;
  }
  try {
    return koffi.decode(ptr, cgoPlatformErrorStruct!) as GoPlatformError;
  } finally {
    await freeCGoPlatformErrorFunc!(ptr);
  }
}
